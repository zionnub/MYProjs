# -*- coding: utf-8 -*-
"""Visualization_v1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L1e5f6usWyoKrIGflIYH4Q1WbBvw8w_H

# Visualization in python

**Importing google libraries for fetching data from google drive**
"""

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

"""**Authenticating with google to fetch data**"""

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

"""**Download files from google dive**"""

downloaded = drive.CreateFile({'id':"1AFKDXyxhJBIzlU_bK3zPBKvyB08JNdjo"})  
downloaded.GetContentFile('temporal.csv')

"""**Importing Pandas and viewing data **"""

import pandas as pd
df = pd.read_csv('temporal.csv')
df.head(10) #View first 10 data rows

"""**Describe the database**"""

df.describe()

"""**Show column type and more info about dataframe**"""

df.info()

"""**Change view options for pandas to extend **"""

pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)

"""**Change view of pandas data type - This doesnot change the actual dataframe**"""

format_dict = {'data science':'${0:,.2f}', 'Mes':'{:%m-%Y}', 'machine learning':'{:.2%}'}

#We make sure that the Month column has datetime format
df['Mes'] = pd.to_datetime(df['Mes'])

#We apply the style to the visualization
df.head().style.format(format_dict)

"""**Higlighting Maximum and Minimum Values**"""

format_dict = {'Mes':'{:%m-%Y}'} #Simplified format dictionary with values that do make sense for our data

df.head().style.format(format_dict).highlight_max(color='darkgreen').highlight_min(color='#ff0000')

"""**Color formating - Gradient**"""

df.head(10).style.format(format_dict).background_gradient(subset=['data science', 'machine learning'], cmap='BuGn')
#Use cmap to map the color , BUGN is palette code

"""**Bar Formatting**"""

df.head().style.format(format_dict).bar(color='red', subset=['data science', 'deep learning'])

"""**Complex Visualization**"""

df.head(10).style.format(format_dict).background_gradient(subset=['data science', 'machine learning'], cmap='BuGn').highlight_max(color='yellow')

!pip install pandas_profiling

"""**This is not working as of now with pandas 1.0 , was compatible with older version of pandas , also its really slow with large datasets**"""

from pandas_profiling import ProfileReport
prof = ProfileReport(df)
prof.to_file(output_file='report.html')
# Example report : https://todoia.es/recursos/informe.html

"""### **MATPLOTLIB**"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
plt.plot(df['Mes'], df['data science'], label='data science')

"""To Show multiple plots at once"""

plt.plot(df['Mes'], df['data science'], label='data science')
plt.plot(df['Mes'], df['machine learning'], label='machine learning')
plt.plot(df['Mes'], df['deep learning'], label='deep learning')

"""**Adding legends to the chart**"""

plt.plot(df['Mes'], df['data science'], label='data science')
plt.plot(df['Mes'], df['machine learning'], label='machine learning')
plt.plot(df['Mes'], df['deep learning'], label='deep learning')
plt.xlabel('Date')
plt.ylabel('Popularity')
plt.title('Popularity of AI terms by date')
plt.grid(True)
plt.legend() #use this to plot legends

"""```
# If you are working with Python from the terminal or a script, after defining the graph with the functions we have written above use plt.show(). 
If you’re working from jupyter notebook, add %matplotlib inline to the beginning of the file and run it before making the chart
```

.

**Multiple charts in same plot - using subplot method**
"""

fig, axes = plt.subplots(2,2)
axes[0, 0].hist(df['data science'])
axes[0, 1].scatter(df['Mes'], df['data science'])
axes[1, 0].plot(df['Mes'], df['machine learning'])
axes[1, 1].plot(df['Mes'], df['deep learning'])

"""**Graph with different point styles ***"""

plt.plot(df['Mes'], df['data science'], 'r-')
plt.plot(df['Mes'], df['data science']*2, 'bs')
plt.plot(df['Mes'], df['data science']*3, 'g^')

"""**Scatterplot**"""

plt.scatter(df['data science'], df['machine learning'])

"""**Bar Chart**"""

plt.bar(df['Mes'], df['machine learning'], width=20)

"""**Histogram**"""

plt.hist(df['deep learning'], bins=15)

"""Adding marker and annotation : Have to find a work around"""

plt.plot(df['Mes'], df['data science'], label='data science')
plt.plot(df['Mes'], df['machine learning'], label='machine learning')
plt.plot(df['Mes'], df['deep learning'], label='deep learning')
plt.xlabel('Date')
plt.ylabel('Popularity')
plt.title('Popularity of AI terms by date')
plt.grid(True)
#plt.text(x='2010-01', y=80, s=r'$\lambda=1, r^2=0.8$') #Coordinates use the same units as the graph
#plt.annotate('Notice something?', xy=('2014-01-01', 30), xytext=('2006-01-01', 50), arrowprops={'facecolor':'red', 'shrink':0.05})

"""Link to all types of plots in matplotlib : **https://matplotlib.org/gallery/index.html**

### **SEABORN**
Seaborn is a library based on Matplotlib
"""

import seaborn as sns
sns.set()
sns.scatterplot(df['Mes'], df['data science'])

"""Graph bases on categorical data as column and color coding"""

sns.relplot(x='Mes', y='deep learning', hue='data science', size='machine learning', col='categorical', data=df)

"""**Heatmap Graph**"""

sns.heatmap(df.corr(), annot=True, fmt='.2f')

"""**Pairplot**

This will be really slow for large data set and hence use samples
"""

sns.pairplot(df)

"""pairplot showing the charts segmented according to the values of the categorical variable"""

sns.pairplot(df, hue='categorical')

"""**Joint Plot - Scatter plot + Histogram together**"""

sns.jointplot(x='data science', y='machine learning', data=df)

"""**ViolinPlot**"""

sns.catplot(x='categorical', y='data science', kind='violin', data=df)

"""Multiple subplots in same plot in Seaborn"""

fig, axes = plt.subplots(1, 2, sharey=True, figsize=(8, 4))
sns.scatterplot(x="Mes", y="deep learning", hue="categorical", data=df, ax=axes[0])
axes[0].set_title('Deep Learning')
sns.scatterplot(x="Mes", y="machine learning", hue="categorical", data=df, ax=axes[1])
axes[1].set_title('Machine Learning')

"""Seaborn Libraries : https://seaborn.pydata.org/examples/index.html

### **BOKEH**

`Bokeh is a library that allows you to generate interactive graphics. We can export them to an HTML document that we can share with anyone who has a web browser.`
"""

from bokeh.plotting import figure, output_file, save
output_file('data_science_popularity.html')

p = figure(title='data science', x_axis_label='Mes', y_axis_label='data science')
p.line(df['Mes'], df['data science'], legend_label='popularity', line_width=2)
save(p)

"""Bokeh gallery -- https://docs.bokeh.org/en/latest/docs/gallery.html

### **FOLIUM for mapping**
"""

!pip install folium

import folium
m1 = folium.Map(location=[41.38, 2.17], tiles='openstreetmap', zoom_start=18)
m1.save('map1.html')

"""Add marker to file"""

m2 = folium.Map(location=[41.38, 2.17], tiles='openstreetmap', zoom_start=16)
folium.Marker([41.38, 2.176], popup='<i>You can use whatever HTML code you want</i>', tooltip='click here').add_to(m2)
folium.Marker([41.38, 2.174], popup='<b>You can use whatever HTML code you want</b>', tooltip='dont click here').add_to(m2)
#m2.save('map2.html')
m2

downloaded = drive.CreateFile({'id':"1BAgfLYJGTogPJWbYk26-F0_1-5xVbwKT"})  
downloaded.GetContentFile('mapa.csv')

!pip install geopandas

from geopandas.tools import geocode
df2 = pd.read_csv('mapa.csv')
df2.dropna(axis=0, inplace=True)
df2['geometry'] = geocode(df2['País'], provider='nominatim')['geometry'] #It may take a while because it downloads a lot of data.
df2['Latitude'] = df2['geometry'].apply(lambda l: l.y)
df2['Longitude'] = df2['geometry'].apply(lambda l: l.x)

m3 = folium.Map(location=[39.326234,-4.838065], tiles='openstreetmap', zoom_start=3)
def color_producer(val):
	if val <= 50:
		return 'red'
	else:
		return 'green'
for i in range(0,len(df2)):
	folium.Circle(location=[df2.iloc[i]['Latitude'], df2.iloc[i]['Longitude']], radius=5000*df2.iloc[i]['data science'], color=color_producer(df2.iloc[i]['data science'])).add_to(m3)
m3.save('map3.html')
m3