# -*- coding: utf-8 -*-
"""MLR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jVtAVcyPDWIbauTGdnEzYgYAfXcAOeAs

## **Multiple Linear Regression**

Data Point : https://www.kaggle.com/uciml/red-wine-quality-cortez-et-al-2009

**Import Google libraries for authentication and file download**
"""

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

"""**Authenticating with google to fetch files from google drive**"""

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

"""**Download data files**"""

downloaded = drive.CreateFile({'id':"1ClhnLtOZaefpj2ZDbOdvONTxbZ--mFy_"})  
downloaded.GetContentFile('winequality.csv')

"""**Import Numpy, Pandas, Scikit Learn and matplotlib** <br>
Numpy : Number processing <br>
Pandas : dataframe processing <br>
Scikit learn : Machine Learning <br>
Matplotlib : Plotting graphs
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score,mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn import metrics
import seaborn as sns
# %matplotlib inline

"""**Reading  data as complete dataframe**"""

dataset = pd.read_csv('winequality.csv')

"""**Describe the data**"""

dataset.describe()

print(dataset.head())

"""**Find the data shape**"""

dataset.shape

"""**Check for null values**"""

dataset.isnull().any()

"""**Fill Null if any**"""

dataset = dataset.fillna(method='ffill')

"""**Divide the dataset into dependent and independent variables**"""

X = dataset[['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates','alcohol']].values
y = dataset['quality'].values

"""**Plot to check the values of dependent variables**"""

plt.figure(figsize=(15,10))
plt.tight_layout()
sns.distplot(dataset['quality'])

"""**Assign Train and Test Data**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

"""**Fit MLR into our dataset**"""

clf = LinearRegression(normalize=True)
clf.fit(X_train,y_train)
y_pred = clf.predict(X_test)

"""**Print Coefficients , MSE and R2 Square**"""

# Commented out IPython magic to ensure Python compatibility.
print('Coefficients: \n', clf.coef_)
# The mean squared error
print('Mean squared error: %.2f'
#       % mean_squared_error(y_test,y_pred))


print('R2_Square Value :',r2_score(y_test,y_pred))

"""**Compare the predicted and actual values**"""

df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})

print(df.head(25))