# -*- coding: utf-8 -*-
"""Artificial Neural Network.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XCdJ7W_fhWnM1B1ipbJAvRu0ExFnICN5

# Artificial Neural Network ( ANN)
"""

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

downloaded = drive.CreateFile({'id':"1391JE7uOZ9OcnbL0AosqW-aAbOjeyBKp"})  
downloaded.GetContentFile('Churn_Modelling.csv')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.metrics import confusion_matrix
import seaborn as sns
import tensorflow as tf
import keras
from keras.models import Sequential
from keras.layers import Dense
# %matplotlib inline

dataset = pd.read_csv('Churn_Modelling.csv')

dataset.describe()

print(dataset.head())

dataset.shape

dataset.isnull().any()

dataset = dataset.fillna(method='ffill')

# X = dataset[['CreditScore', 'Geography', 'Gender', 'Age', 'Tenure', 'Balance', 'NumOfProducts', 'HasCrCard', 'IsActiveMember', 'EstimatedSalary']].values
# y = dataset['Exited'].values

X = dataset.iloc[:,3:13].values
y = dataset.iloc[:,13]

"""Encoding Categorical Variables"""

labelencoder_X_1 = LabelEncoder()
X[:,1] = labelencoder_X_1.fit_transform(X[:,1])
labelencoder_X_2 = LabelEncoder()
X[:,2] = labelencoder_X_2.fit_transform(X[:,2])
print(X)

ct = ColumnTransformer(
    [('oh_enc', OneHotEncoder(sparse=False,drop= 'first'), [1, 2]),],  # the column numbers I want to apply this to
    remainder='passthrough'  # This leaves the rest of my columns in place
)
X = ct.fit_transform(X)
print(X) # Notice the output is a string

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

print(X_test)

"""### Add feature scaling ( for normalization)

Fit_transform calculates the mean and strandard deviatin and applies trandform. The data is stored and can be recalled using transform
"""

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""### Building ANN"""

classifier = Sequential()

classifier.add(Dense())